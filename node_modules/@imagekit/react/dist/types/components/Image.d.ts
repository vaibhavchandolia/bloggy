import { type GetImageAttributesOptions } from "@imagekit/javascript";
import React from "react";
import type { SrcProps } from "../interface";
export type IKImageProps = Omit<JSX.IntrinsicElements["img"], "src" | "srcSet" | "width"> & SrcProps & Pick<GetImageAttributesOptions, "deviceBreakpoints" | "imageBreakpoints"> & {
    /**
     * Set to `false` to disable automatic responsive `srcSet` generation.
     * Defaults to `true`.
     */
    responsive?: boolean;
    /**
     * The intended display width of the image.
     *
     * - Accepts a number (e.g. `100`) or a numeric string (e.g. `"100"`).
     * - If you pass units such as `"100px"` or a percentage like `"100%"`, the value
     *   is ignored when generating the `srcSet`. In that case, a broad range of
     *   widths is produced to cover all possible viewport sizes.
     */
    width?: number | `${number}`;
};
/**
 * A React wrapper around the native `<img>` element that adds ImageKit's
 * optimization and transformation capabilities.
 *
 * All native `<img>` props are supported, in addition to the ImageKitâ€‘specific props.
 *
 * @example
 * ```jsx
 * import { Image } from "@imagekit/react";
 *
 * <Image
 *   urlEndpoint="https://ik.imagekit.io/your_imagekit_id" // Can also be set on a parent <ImageKitProvider />
 *   src="/default-image.jpg"                               // Path in your ImageKit account
 *   alt="Default image"
 *   width={500}
 *   height={500}
 *   transformation={[{ width: 500, height: 500 }]}         // Optional ImageKit transformations
 * />
 * ```
 */
export declare const Image: (props: IKImageProps) => React.JSX.Element | null;
